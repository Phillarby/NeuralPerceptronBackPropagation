/**
 * 
 */
package uk.co.larby.neural;

import java.util.Hashtable;
import java.util.List;

import uk.co.larby.app.Neural.Settings;

/**
 * @author larbyp
 *
 */
public class Perceptron extends Unit {
	
	public Perceptron(ActivationFunction AF) {
		super(AF);
	}

	public double getY(Object x)
	{
		double value = (Double)x;
		return value * getInputAt(1).getWeight() + getInputAt(0).getWeight();
	}
	
	/**
	 * Inner class for reporting test results
	 * @author larbyp
	 *
	 */
	public class TestResult
	{
		boolean _testPassed;
		int _incorrectClassifications;
		int _correctClassifications;
		
		public boolean getResult()
		{
			return _testPassed;
		}
		
		public int getCorrectClassifications()
		{
			return _correctClassifications;
		}
		
		public int getIncorrectClassifications()
		{
			return _incorrectClassifications;
		}
	}
	
	/**
	 * Test the current vector against the entire dataset to confim if a match has been found
	 * @param ds The data set to be checked
	 * @param Positive The class we are checking for
	 * @return
	 */
	public TestResult Test(DataSet<?> ds, Hashtable<String, Boolean> Classifier, List<Integer> Attributes)
	{	
		TestResult ret = new TestResult();
		boolean IsOK = true;
			
		//Iterate through all data set members confirming validity with current weight configuration
		for(int i = 0; i < ds.getMembers().size(); i++)
		{
			//Get a reference to the next data set member to be tested
			DataSetMember<?> dsm = ds.getMemberAt(i);
					
			//Update input values to the values from the data set member being tested
			//Note: starting the iteration at index 1 avoids updating the bias value
			int inputIndex = 1;
			for (int att : Attributes)
			{
				//Set the attribute value of the input to that of the data set member under test
				getInputAt(inputIndex).setValueObject(dsm.getIValueAt(att));
				inputIndex ++;
			}
			
			//Test if expected output is generated by the unit and record result
			if (Classifier.get(dsm.getCategory()) == getOutput(Boolean.class))
			{
				ret._correctClassifications ++;
			}
			else
			{
				ret._incorrectClassifications ++;
				IsOK = false;
			}
		}
		
		ret._testPassed = IsOK;
		return ret;
	}
}
