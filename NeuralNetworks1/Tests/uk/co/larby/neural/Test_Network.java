/**
 * 
 */
package uk.co.larby.neural;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * @author larbyp
 *
 */
public class Test_Network {

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void confirm_output_updates_persist_to_connected_inputs() {
		//******************************************
		//Arrange - set up the test context
		//******************************************
		//Set up a basic network of two connected units
		Network net = new Network(); //The network
		IUnit outputUnit = new Unit(ActivationFunction.Sigmoid); //The unit providing the output
		IUnit inputUnit = new Unit(ActivationFunction.Sigmoid); //The downstream linked unit
		
		//give each unit a bias input
		outputUnit.getInputs().add(Helpers.getStaticInput(1, 0));
		inputUnit.getInputs().add(Helpers.getStaticInput(1, 0));
		
		//Add the units to the network and get their indices
		int outputIndex = net.addUnit(outputUnit);
		int inputIndex = net.addUnit(inputUnit);
		
		//Assign a new static value input of value 4 and weight 0.5 to the output unit
		net.setStaticInput(outputIndex, Helpers.getStaticValue(4), 0.5d);
		
		//Connect the output of the output unit to the input of the input unit with a weight of 0.5
		net.connect(outputIndex, inputIndex, 0.5);
		
		//set up the first stage expected values and confirm these are generated by the units
		double outputInitialExpected = 1 / (1 + java.lang.Math.exp( -2 ));
		double inputInitialExpected = 1 / (1 + java.lang.Math.exp( -outputInitialExpected * 0.5 ));
		assertEquals(inputInitialExpected, inputUnit.getOutput(), 0.0001d);
		assertEquals(outputInitialExpected, outputUnit.getOutput(),  0.0001d);
		
		//Determine the expected outputs once the output units input weight is updates to 0.25
		double outputFinalExpected = 1 / (1 + java.lang.Math.exp( -1 ));
		double inputFinalExpected = 1 / (1 + java.lang.Math.exp( -outputFinalExpected * 0.5 ));
		
		//****************************************
		//Act - Perform the operations under test
		//****************************************
		//Update the output unit's weight
		outputUnit.getInputAt(1).setWeight(0.25);
		
		//****************************************
		//Assert - Confirm the test results
		//****************************************
		//Confirm the output of the input unit has updated as expected
		assertEquals(inputFinalExpected, inputUnit.getOutput(), 0.0001d);
	}

}
